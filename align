#!/usr/bin/ruby

require 'optparse'
require 'json'

def needleman_wunsch(
  seq1:,
  seq2:,
  match_score: 1,
  mismatch_penalty: -1,
  gap_penalty: -2,
  blosum_matrix: nil
  )
  n = seq1.length
  m = seq2.length

  # Initialize scoring and direction matrices
  score_matrix = Array.new(n+1) { Array.new(m+1) }
  direction_matrix = Array.new(n+1) { Array.new(m+1) }

  # Initialize first row and column
  (0..n).each { |i| score_matrix[i][0] = i * gap_penalty }
  (0..m).each { |j| score_matrix[0][j] = j * gap_penalty }

  # Fill matrices
  (1..n).each do |i|
    (1..m).each do |j|
      if blosum_matrix
        match_score = blosum_matrix[seq1[i-1]][seq2[j-1]]
      else
        match_score = (seq1[i-1] == seq2[j-1] ? match_score : mismatch_penalty)
      end

      match = score_matrix[i-1][j-1] + match_score
      delete = score_matrix[i-1][j] + gap_penalty
      insert = score_matrix[i][j-1] + gap_penalty

      score_matrix[i][j], direction_matrix[i][j] = [match, delete, insert].each_with_index.max
    end
  end

  # Traceback
  align1, align2 = "", ""
  i, j = n, m

  while i > 0 and j > 0
    if direction_matrix[i][j] == 0
      align1 = seq1[i-1] + align1
      align2 = seq2[j-1] + align2
      i -= 1
      j -= 1
    elsif direction_matrix[i][j] == 1
      align1 = seq1[i-1] + align1
      align2 = "-" + align2
      i -= 1
    else
      align1 = "-" + align1
      align2 = seq2[j-1] + align2
      j -= 1
    end
  end

  while i > 0
    align1 = seq1[i-1] + align1
    align2 = "-" + align2
    i -= 1
  end

  while j > 0
    align1 = "-" + align1
    align2 = seq2[j-1] + align2
    j -= 1
  end

  return align1, align2
end

# Define options hash to store flag values
options = {}

# Create OptionParser object
OptionParser.new do |opts|
  opts.banner = "Usage: align.rb [options]"

  opts.on("-a", "--seq1 SEQUENCE1", "First sequence") do |seq1|
    options[:seq1] = seq1
  end

  opts.on("-b", "--seq2 SEQUENCE2", "Second sequence") do |seq2|
    options[:seq2] = seq2
  end

  opts.on("-p", "--protein BLOSUM{NUM}", "Use protein scoring matrix") do |blosum_num|
    options[:protein] = blosum_num
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end.parse(ARGV)

# Assign sequences from options hash
seq1 = options[:seq1]
seq2 = options[:seq2]

script_dir = File.expand_path(File.dirname(__FILE__))
# Read in BLOSUM matrix if protein flag is set
if (options[:protein])
  blosum_num = options[:protein]
  blosum_matrix_path = File.join(script_dir, "blosum_matrices", "BLOSUM#{blosum_num}.json")
  if File.exist?(blosum_matrix_path)
    blosum_matrix = JSON.parse(File.read(blosum_matrix_path))
  else
    puts "BLOSUM matrix file not found: #{blosum_matrix_path}"
    exit
  end
end

# Call needleman_wunsch function
if (options[:protein])
  aligned_seq1, aligned_seq2 = needleman_wunsch(seq1: seq1, seq2: seq2, blosum_matrix: blosum_matrix)
else
  aligned_seq1, aligned_seq2 = needleman_wunsch(seq1: seq1, seq2: seq2)
end

# Colorize characters that are different between the sequences
colorized_seq1 = ""
colorized_seq2 = ""
distance = 0

aligned_seq1.chars.each_with_index do |char, i|
  if char == aligned_seq2[i]
    colorized_seq1 << "\e[31m#{char}\e[0m" # Red color
    colorized_seq2 << "\e[32m#{char}\e[0m" # Green color
  elsif char == '-'
    colorized_seq1 << "\e[30;43m#{char}\e[0m" # Black character, Orange background color
    colorized_seq2 << "\e[30;43m#{aligned_seq2[i]}\e[0m" # Black character, Orange background color
    distance += 1
  elsif aligned_seq2[i] == '-'
    colorized_seq1 << "\e[30;45m#{char}\e[0m" # Black character, Violet background color
    colorized_seq2 << "\e[30;45m#{aligned_seq2[i]}\e[0m" # Black character, Violet background color
    distance += 1
  else
    colorized_seq1 << "\e[30;41m#{char}\e[0m" # Black character, Red background color
    colorized_seq2 << "\e[30;42m#{aligned_seq2[i]}\e[0m" # Black character, Green background color
    distance += 1
  end
end

# Print colorized aligned sequences
puts colorized_seq1
puts "\n"
puts colorized_seq2
puts "Conserved: #{colorized_seq1.scan("\e[31m").count} \
Insertions: #{colorized_seq1.scan("-").count} \
Deletions: #{colorized_seq2.scan("-").count} \
Mismatches: #{colorized_seq1.scan("\e[30;41m").count} \
Distance: #{distance / aligned_seq1.length.to_f}"